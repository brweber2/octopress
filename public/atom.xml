<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[brweber2 blog]]></title>
  <link href="http://brweber2-blog.heroku.com/atom.xml" rel="self"/>
  <link href="http://brweber2-blog.heroku.com/"/>
  <updated>2012-03-25T22:03:02-04:00</updated>
  <id>http://brweber2-blog.heroku.com/</id>
  <author>
    <name><![CDATA[brweber2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing logic-redux]]></title>
    <link href="http://brweber2-blog.heroku.com/blog/2012/03/24/introducing-logic-redux/"/>
    <updated>2012-03-24T18:25:00-04:00</updated>
    <id>http://brweber2-blog.heroku.com/blog/2012/03/24/introducing-logic-redux</id>
    <content type="html"><![CDATA[<p>Introducing logic-redux, a new logic programming language that runs on the JVM that can be used with its own syntax or via a Java API.</p>

<p>logic-redux can be found on github at <a href="https://github.com/brweber2/logic-redux">https://github.com/brweber2/logic-redux</a></p>

<h2>Learning</h2>

<p>If you are a professional programmer and you are not familiar with logic programming, then you should add it to your list of things to learn. It should probably be at, or at least very near, the front of the list as well.</p>

<p>One excellent resource to learn Prolog is <a href="http://www.learnprolognow.org">http://www.learnprolognow.org</a></p>

<p>Logic programming is <em>not</em> wonderful for writing all sorts of general applications, however it is an amazing tool for solving certain types of problems.</p>

<h2>Documentation</h2>

<p>More documentation to follow, but start out with the <a href="https://github.com/brweber2/logic-redux">README</a> file on github and play around with the REPL.  Don&#8217;t forget about the syntax differences between logic-redux and Prolog proper! The biggest being that in logic-redux variables are always prefixed with the &#8216;@&#8217; character.</p>

<h2>Why?</h2>

<p>Why use logic-redux instead of <a href="http://alice.unibo.it/xwiki/bin/view/Tuprolog">TuProlog</a> or <a href="http://www.swi-prolog.org">SWI-Prolog</a>? logic-redux is very simple and lightweight compared to both TuProlog and SWI-Prolog.  If you need to run on the JVM then SWI-Prolog is out.  If you need a full featured Prolog that runs on the JVM then I recommend using TuProlog.  If you need a simple way to declare facts and rules so that you can query them, then I suggest you give logic-redux a try!</p>

<ul>
<li>Runs on the JVM</li>
<li>Simple, lightweight implementation</li>
<li>It has a REPL</li>
<li>Can be used with syntax or via a Java API</li>
</ul>


<p>Give it a try!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing concat-redux]]></title>
    <link href="http://brweber2-blog.heroku.com/blog/2012/03/24/introducing-concat-redux/"/>
    <updated>2012-03-24T18:25:00-04:00</updated>
    <id>http://brweber2-blog.heroku.com/blog/2012/03/24/introducing-concat-redux</id>
    <content type="html"><![CDATA[<p>Introducing concat-redux, a new concatenative programming language that runs on the JVM!</p>

<p>concat-redux is conceptually similar to <a href="http://en.wikipedia.org/wiki/Forth_(programming_language)">Forth</a> and <a href="http://factorcode.org">Factor</a></p>

<p>concat-redux can be found on github at <a href="https://github.com/brweber2/concat-redux">https://github.com/brweber2/concat-redux</a></p>

<h2>New Syntax</h2>

<p>concat-redux introduces one new piece of syntactic sugar to help with reading the language.</p>

<p>A typical example would look like (reverse Polish notation):</p>

<pre><code>5 3 +
</code></pre>

<p>Another example might be:</p>

<pre><code>"hello" "world" concat 
</code></pre>

<p>concat-redux introduces a new meaning to &#8216;:&#8217;</p>

<p>Any word prefixed by a colon &#8216;:&#8217; is pushed before the next period &#8216;.&#8217;</p>

<p>This enables the author to write the same code as:</p>

<pre><code>:concat "hello" "world" .
</code></pre>

<p>or</p>

<pre><code>"hello" :concat "world" .
</code></pre>

<p>This flexibility allows you to move words around so that sections of code are easier to read by adding just one simple, unambiguous rule.</p>

<h2>Why?</h2>

<ul>
<li>It runs on the JVM</li>
<li>It has a REPL</li>
<li>It can be used to quickly prototype an idea</li>
</ul>


<p>Give it a try!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Protogrid]]></title>
    <link href="http://brweber2-blog.heroku.com/blog/2012/03/24/introducing-protogrid/"/>
    <updated>2012-03-24T18:24:00-04:00</updated>
    <id>http://brweber2-blog.heroku.com/blog/2012/03/24/introducing-protogrid</id>
    <content type="html"><![CDATA[<p>Protogrid is a prototype based programming language that runs on the JVM.</p>

<p>More details can be found <a href="http://www.brweber2.com/blog">here</a> and the project can be found on github at <a href="https://github.com/brweber2/protogrid">https://github.com/brweber2/protogrid</a></p>

<h2>Why?</h2>

<ul>
<li>It runs on the JVM</li>
<li>It allows simple interop with Java</li>
<li>It has a REPL</li>
<li>You can have a prototype working in no time</li>
</ul>


<h2>Introduction</h2>

<p>Protogrid is a dynamically typed, prototype based programming language that runs on the JVM.</p>

<p>It can be found on github at <a title="http://www.github.com/brweber2/protogrid" href="http://www.github.com/brweber2/protogrid">http://www.github.com/brweber2/protogrid</a></p>

<h1><strong>For users:</strong></h1>


<p>Protogrid strives to be simple to write and read.  Each form is intended to mean one thing so there should not be any confusion once you become familiar with the syntax.  In many ways this one to one mapping of syntax and semantics has been a simplifying and limiting factor in the design of the language.  This is especially true for developers who come to protogrid with pre-conceived notions from past experience.</p>

<ul>
    <li>There is a single keyword &#8216;var&#8217;.</li>
    <li>nil, undefined, true and false are built in prototypes.</li>
    <li>In protogrid there is a single numeric type.</li>
    <li>Variable names cannot contain numbers.</li>
    <li>Parenthesis always indicate function application, even when there is no function to apply.  For example, parenthesis used for changing or specifying order of operation precedence are strictly evaluated and the resulting value is left as the current context, but no function invocation actually takes place.</li>
    <li>Brackets indicate a function declaration.</li>
    <li>Braces indicate a scoped block.</li>
    <li>Single = denotes assignment.</li>
</ul>


<h1><strong>For programming language enthusiasts:</strong></h1>


<p>Unfortunately, there isn&#8217;t much here that will excite you.  Protogrid introduces <del>virtually</del> no new programming paradigms, it merely strives to make the developer experience more enjoyable.  The current form of Java interop is not something I&#8217;ve seen in any other language that runs on the JVM, but it is not something new or revolutionary.  It is arguably a nicer reflection API.  And yes, you will cringe if you look under the hood.  The implementation is insanely naive and non-performant in every aspect imaginable.</p>

<p>&nbsp;</p>

<h1><strong>Java Interop</strong></h1>


<p>To start interacting with the underlying Java platform, the first step is typically to wrap a Java class.</p>

<blockquote>var JavaString = WrapClass( java.lang.String )</blockquote>


<p>&nbsp;</p>

<p>The JavaString prototype now is a wrapped Java class.  It can be used in one of two ways.</p>

<ol>
    <li>If invoked the arguments are used to determine which constructor should be called at runtime and if successful a wrapped instance is returned.</li>
    <li>Accessing a slot on the wrapped class will look for a field.  If one is found a wrapped field is returned.  If no field is found, a wrapped methods prototype is returned that wraps all the static methods on the class with the matching name.  If this wrapped methods prototype is invoked it uses the arguments passed to it to determine at runtime which specific method should be invoked and a wrapped instance is returned with the result of the invocation.</li>
</ol>


<p>&nbsp;</p>

<blockquote>var message = JavaString.format( &#8220;Hello %s&#8221;, &#8220;World!&#8221; )</blockquote>


<p>There are a few points of interest here.  There is more than one static format method on java.lang.String.  Additionally, the String &#8220;World!&#8221; is converted to an Object[] to support the variadic version of the format method used here.</p>

<p>A wrapped instance is a prototype that can be used with the protogrid, but that can be coerced back to its native Java type when necessary.</p>

<p>&nbsp;</p>

<blockquote>println( message.toUpperCase() )</blockquote>


<h2>What&#8217;s missing from the interop story?</h2>


<p>Quite a bit.  There is currently no way to implement an interface, to extend a class or to create a new interface or class.</p>

<h1>Show me more!</h1>


<h2>Creating a new prototype</h2>


<p>Simply clone an existing prototype</p>

<blockquote>var MyProto = clone( Object )</blockquote>


<p>Setting and accessing slots on the prototype is trivial</p>

<blockquote>MyProto.foo = &#8220;barbaz&#8221;

println( MyProto.foo )</blockquote>


<p>Inspecting the prototype</p>

<blockquote>println( MyProto.slots() )</blockquote>


<h2>Viewing the AST</h2>


<p>At any point, the built in ast function can be called to print out a readable form of the Abstract Syntax Tree if there is every any doubt about what the interpreter is seeing.</p>

<blockquote>ast( 2 + 3 * 4 ^ 5 % 6 )</blockquote>


<p>This will result in the following AST</p>

<blockquote>(  2   +  ( (  3   *  (  4   ^   5  )  )   %   6  )  )</blockquote>


<h2>Loading code from a file</h2>


<p>When loading code from a file, any side effects will occur at load time and a scope object with all the top level definitions from the file will be returned.  This can be assigned to a variable and values and functions can be accessed without worrying about collisions within the current scope.</p>

<p>Suppose we have a file located at src/hello_world.grid relative to the current directory with the following content.</p>

<blockquote>var sayHelloTo = [name] { println( strf( &#8220;Hello %s&#8221; List(name) ) ) }</blockquote>


<p>To load this file, simply call the built in load function.</p>

<blockquote>var ns = load( &#8220;src/hello_world.grid&#8221; )

ns.sayHelloTo( &#8220;Flynn&#8221; )</blockquote>


<p>If you do not want to namespace any particular functions it is possible to map them into the curent scope by simply assigning them to a variable.</p>

<blockquote>var sayHelloTo = ns.sayHelloTo</blockquote>


<h2>Operators</h2>


<p>Math + - * / % ^</p>

<p>Logic &amp;&amp; ||</p>

<p>Comparison == != &lt; &lt;= &gt; &gt;=</p>

<h2>Control Flow</h2>


<p>There are built in functions for conditionals, looping, exceptions and exception handling.</p>

<p>Conditionals</p>

<blockquote>if ( true println( &#8220;true&#8221; ) println( &#8220;false&#8221; ) )

if ( &lt;cond&gt; &lt;true expr&gt; &lt;false expr&gt; )</blockquote>


<p>Looping</p>

<blockquote>loop( &lt;structure&gt; &lt;function&gt; )</blockquote>


<p>The function passed to loop must have two parameters, the value for each iteration and in the index number of the iteration (zero based).</p>

<blockquote>while( &lt;condition&gt; &lt;block&gt; )</blockquote>


<p>Exceptions</p>

<blockquote>var err = error( &#8220;Uh oh&#8221; )

raise( err )

try ( &lt;block&gt; &lt;finally-block&gt; )</blockquote>


<p>But what about catching the exceptions?  A try block does not return the result of the block, it returns an object that contains a boolean indicating whether or not an exception was thrown and either the exception or the resultant value.  It is therefore possible to access slots on the resultant prototype to perform whatever error handling is necessary.</p>

<blockquote>var t = try( socket.write() socket.close() )

if ( t.hasError raise( t.error ) t.result )</blockquote>


<h2>Composite Data Structures</h2>


<p>There are lists. There is a built in function to construct them and they can contain an object of any type.  Lists are zero indexed for access operations.</p>

<blockquote>var names = List( &#8220;Kevin&#8221;, &#8220;Sam&#8221;, &#8220;Quorra&#8221; )

println( names.get( 1 ) )</blockquote>


<h1>Because I have to&#8230;</h1>


<h2></h2>


<h2>Hello World</h2>


<blockquote>println( &#8220;Hello world!&#8221; )</blockquote>


<h2>Factorial</h2>


<blockquote>var fac = [n] {
<p style="padding-left: 30px;">if ( n == 0 || n == 1</p>
<p style="padding-left: 30px;">1</p>
<p style="padding-left: 30px;">n * recur( n - 1 )  )</p>
}</blockquote>


<p>In protogrid, recursion is achieved by calling the recur function instead of the current function by name.</p>

<h1><strong>Getting started</strong></h1>


<p>The best way to get started is to download the executable protogrid jar and start experimenting with the REPL.  Syntax highlighting for IntelliJ IDEA and TextMate will be added to github in the very near future.</p>

<h2><strong>Down the road</strong></h2>


<ul>
    <li>Syntax highlighting</li>
    <li>Compiled version</li>
    <li>Debugger</li>
    <li>Static typing</li>
    <li>Lazy evaluation</li>
    <li>Macros</li>
    <li>Named arguments</li>
    <li>Default values for parameters</li>
    <li>Richer Java interop</li>
    <li>De-structuring</li>
    <li>Targeting other platforms</li>
</ul>


<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A binary file viewer]]></title>
    <link href="http://brweber2-blog.heroku.com/blog/2011/12/03/a-binary-file-viewer/"/>
    <updated>2011-12-03T22:20:00-05:00</updated>
    <id>http://brweber2-blog.heroku.com/blog/2011/12/03/a-binary-file-viewer</id>
    <content type="html"><![CDATA[<p>There are a lot of binary file viewers in the world.  A <em>lot</em>. So why one more?  First of all, because I want to be able to view more than a hex dump.  I want to be able to describe the rules of the file format and I want the application to show me semantic meaning in the output.  Surely this exists as well?  You betcha, in spades.  But it is more fun to write the code when you have some time to kill at a conference. :)</p>

<p>Of course, this can all be done trivially until the rules get a little more complex.  What if the fifth section of the file is only present if the third section had a particular value?  What if the length of the sixth section was the value from the fourth section?  What if our rules are so complex they require code to describe the relationships among the sections?  Enter binpv.</p>

<p>Yeah, yeah, yeah, so the name &#8216;binpv&#8217; is terrible. I know, but let&#8217;s take a look at binary file specification example:</p>

<figure class='code'><figcaption><span> (spec.clj)</span> <a href='http://brweber2-blog.heroku.com/downloads/code/binpv/spec.clj'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">key-token-format</span> <span class="p">(</span><span class="nf">binary-protocol</span> <span class="p">(</span><span class="nf">ByteBasedChunker</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">section</span> <span class="nv">:KEY_TOKEN_ID,</span>            <span class="p">(</span><span class="nf">FixedLength</span><span class="o">.</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">section</span> <span class="nv">:INCLUDES_PRIVATE_KEY,</span>    <span class="p">(</span><span class="nf">EnumeratedValue</span><span class="o">.</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">IncludesPrivateKey</span><span class="o">.</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">section</span> <span class="nv">:PRIVATE_KEY,</span>             <span class="p">(</span><span class="nf">DependentValue</span><span class="o">.</span> <span class="mi">256</span> <span class="p">(</span><span class="nf">PrivateKeyPresent</span><span class="o">.</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">section</span> <span class="nv">:PUBLIC_KEY_LENGTH,</span>       <span class="p">(</span><span class="nf">FixedLength</span><span class="o">.</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">section</span> <span class="nv">:PUBLIC_KEY,</span>              <span class="p">(</span><span class="nf">DependentFixedLength</span><span class="o">.</span> <span class="p">(</span><span class="nf">PublicKeyLength</span><span class="o">.</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">section</span> <span class="nv">:THROW_AWAY,</span>              <span class="p">(</span><span class="nf">VariableLength</span><span class="o">.</span> <span class="p">(</span><span class="nf">StopAt</span><span class="o">.</span> <span class="p">[</span><span class="sc">\F</span> <span class="sc">\G</span><span class="p">])))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">section</span> <span class="nv">:THE_END,</span>                 <span class="p">(</span><span class="nf">EnumeratedValue</span><span class="o">.</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">AllDone</span><span class="o">.</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s reasonably declarative!  Let&#8217;s break it into pieces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">binary-protocol</span> <span class="p">(</span><span class="nf">ByteBasedChunker</span><span class="o">.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have a binary protocol that reads a byte at a time.  OK, so far so good.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">section</span> <span class="nv">:KEY_TOKEN_ID,</span>            <span class="p">(</span><span class="nf">FixedLength</span><span class="o">.</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm, it looks like the file starts off with the key token id, which is a fixed length field.  The field must be two bytes, because we know we&#8217;re reading bytes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">section</span> <span class="nv">:INCLUDES_PRIVATE_KEY,</span>    <span class="p">(</span><span class="nf">EnumeratedValue</span><span class="o">.</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">IncludesPrivateKey</span><span class="o">.</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, it looks like our next section is the private key.  It is a one byte enumerated value.  That means we have a fixed set of possible values, but what could they be?  Well, here we encounter the first place we have to provide some code.</p>

<p>We&#8217;re going to have to define a function that will take the value (a stream of 1 byte in this case) and return our value.  A Clojure prototype has been defined just for this purpose.  It looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defprotocol</span> <span class="nv">AnEnumeration</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">get-value</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">match-seq</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we just have to extend the prototype.</p>

<figure class='code'><figcaption><span> (enum_example.clj)</span> <a href='http://brweber2-blog.heroku.com/downloads/code/binpv/enum_example.clj'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">deftype</span> <span class="nv">IncludesPrivateKey</span>
</span><span class='line'>    <span class="p">[]</span>
</span><span class='line'>    <span class="nv">AnEnumeration</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">get-value</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">match-seq</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">first-match</span> <span class="p">(</span><span class="nb">first </span><span class="nv">match-seq</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">nil? </span><span class="nv">first-match</span><span class="p">)</span>
</span><span class='line'>                <span class="nv">:eof</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">Character/toChars</span> <span class="nv">first-match</span><span class="p">))</span>
</span><span class='line'>                    <span class="sc">\v</span> <span class="nv">:private</span>
</span><span class='line'>                    <span class="sc">\b</span> <span class="nv">:public</span>
</span><span class='line'>                  <span class="nv">:unknown</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a fair bit of boilerplate there for converting the stream of bytes to a character to find out if it is a &#8216;v&#8217; or a &#8216;p&#8217;.  This can undoubtedly be simplified, but like I said before, this is what you get from rushed conference driven development.</p>

<p>I won&#8217;t bore you going through the rest of the sections in detail, but suffice it to say that there are only a few places you have to plug in code.</p>

<ul>
<li>PrivateKeyPresent - extends DependentFun prototype</li>
<li>PublicKeyLength - extends DependentLength prototype</li>
<li>[\F \G] - the sequence that ends the section</li>
<li>AllDone - extends AnEnumeration prototype</li>
</ul>


<p>So once you have declared your binary specification and written a the logic that is custom to your format, all that there is left to do is to is parse the file and view it.  Let&#8217;s parse it first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">parsed</span> <span class="p">(</span><span class="nf">parse-binary</span> <span class="p">(</span><span class="nf">FileStreamWrapper</span><span class="o">.</span> <span class="nv">test-file</span><span class="p">)</span> <span class="nv">key-token-format</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait, you keep the parsed file in memory??? So this won&#8217;t work with large files!?  Correct!  Maybe I should have called this &#8216;can fit into memory binary file parser&#8217; or something like that.  Did I mention something about conference driven development yet?  So why did I choose to do this?  Laziness?  Perhaps, but we also have rules that depend on the values of previous sections.  If I went with a streaming model then that information would have been lost.  Unless there was a filter that was smart enough to know which values really mattered and had to be kept and discarded the rest.  Maybe someday I&#8217;ll add a compiler with these smarts, but for now the file has to fit into memory.</p>

<p>So last but not least, we have to display our parsed file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">visualize-binary</span> <span class="p">(</span><span class="nb">take </span><span class="mi">7</span> <span class="p">(</span><span class="nb">repeat </span><span class="p">(</span><span class="nf">HexVisualizer</span><span class="o">.</span><span class="p">)))</span> <span class="nv">parsed</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is going on there?  Whoa nelly.  Actually, each section can be viewed with its own visualizer.  In my sample file specification I had seven sections, so I need 7 visualizers.  Here is what the output of running our program looks like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">:KEY_TOKEN_ID</span>
</span><span class='line'><span class="mi">00000000</span><span class="nv">:</span>  <span class="mi">4</span><span class="nv">A</span> <span class="mi">4</span><span class="nv">B</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00-00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="nv">JK</span><span class="o">......</span><span class="nv">-</span><span class="o">........</span>
</span><span class='line'>
</span><span class='line'><span class="nv">:INCLUDES_PRIVATE_KEY</span>
</span><span class='line'><span class="nv">:unknown</span>
</span><span class='line'>
</span><span class='line'><span class="nv">:PRIVATE_KEY</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'>
</span><span class='line'><span class="nv">:PUBLIC_KEY_LENGTH</span>
</span><span class='line'><span class="mi">00000000</span><span class="nv">:</span>  <span class="mi">85</span> <span class="mi">4</span><span class="nv">C</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00-00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="o">.</span><span class="nv">L</span><span class="o">......</span><span class="nv">-</span><span class="o">........</span>
</span><span class='line'>
</span><span class='line'><span class="nv">:PUBLIC_KEY</span>
</span><span class='line'><span class="mi">00000000</span><span class="nv">:</span>  <span class="mi">4</span><span class="nv">D</span> <span class="mi">4</span><span class="nv">E</span> <span class="mi">4</span><span class="nv">F</span> <span class="mi">50</span> <span class="mi">51</span> <span class="mi">52</span> <span class="mi">53</span> <span class="mi">54-55</span> <span class="mi">56</span> <span class="mi">57</span> <span class="mi">58</span> <span class="mi">59</span> <span class="mi">5</span><span class="nv">A</span> <span class="mi">5</span><span class="nv">B</span> <span class="mi">5</span><span class="nv">C</span>  <span class="nv">MNOPQRST-UVWXYZ</span><span class="p">[</span><span class="err">\</span>
</span><span class='line'><span class="mi">00000010</span><span class="nv">:</span>  <span class="mi">5</span><span class="nv">D</span> <span class="mi">5</span><span class="nv">E</span> <span class="mi">5</span><span class="nv">F</span> <span class="mi">60</span> <span class="mi">61</span> <span class="mi">62</span> <span class="mi">63</span> <span class="mi">64-65</span> <span class="mi">66</span> <span class="mi">67</span> <span class="mi">68</span> <span class="mi">69</span> <span class="mi">6</span><span class="nv">A</span> <span class="mi">6</span><span class="nv">B</span> <span class="mi">6</span><span class="nv">C</span>  <span class="p">]</span><span class="nv">^_</span><span class="o">`</span><span class="nv">abcd-efghijkl</span>
</span><span class='line'><span class="mi">00000020</span><span class="nv">:</span>  <span class="mi">6</span><span class="nv">D</span> <span class="mi">6</span><span class="nv">E</span> <span class="mi">6</span><span class="nv">F</span> <span class="mi">70</span> <span class="mi">71</span> <span class="mi">72</span> <span class="mi">73</span> <span class="mi">74-75</span> <span class="mi">76</span> <span class="mi">77</span> <span class="mi">78</span> <span class="mi">79</span> <span class="mi">7</span><span class="nv">A</span> <span class="mi">7</span><span class="nv">B</span> <span class="mi">7</span><span class="nv">C</span>  <span class="nv">mnopqrst-uvwxyz</span><span class="p">{</span><span class="err">|</span>
</span><span class='line'><span class="mi">00000030</span><span class="nv">:</span>  <span class="mi">7</span><span class="nv">D</span> <span class="mi">7</span><span class="nv">E</span> <span class="mi">7</span><span class="nv">F</span> <span class="nv">C3</span> <span class="mi">85</span> <span class="nv">C3</span> <span class="mi">87</span> <span class="nv">C3-89</span> <span class="nv">C3</span> <span class="mi">91</span> <span class="nv">C3</span> <span class="mi">96</span> <span class="nv">C3</span> <span class="mi">9</span><span class="nv">C</span> <span class="nv">C3</span>  <span class="p">}</span><span class="nv">~</span><span class="o">......</span><span class="nv">-</span><span class="o">........</span>
</span><span class='line'><span class="mi">00000040</span><span class="nv">:</span>  <span class="nv">A1</span> <span class="nv">C3</span> <span class="nv">A0</span> <span class="nv">C3</span> <span class="nv">A2</span> <span class="nv">C3</span> <span class="nv">A4</span> <span class="nv">C3-A3</span> <span class="nv">C3</span> <span class="nv">A5</span> <span class="nv">C3</span> <span class="nv">A7</span> <span class="nv">C3</span> <span class="nv">A9</span> <span class="nv">C3</span>  <span class="o">........</span><span class="nv">-</span><span class="o">........</span>
</span><span class='line'><span class="mi">00000050</span><span class="nv">:</span>  <span class="nv">A8</span> <span class="nv">C3</span> <span class="nv">AA</span> <span class="nv">C3</span> <span class="nv">AB</span> <span class="nv">C3</span> <span class="nv">AD</span> <span class="nv">C3-AC</span> <span class="nv">C3</span> <span class="nv">AE</span> <span class="nv">C3</span> <span class="nv">AF</span> <span class="nv">C3</span> <span class="nv">B1</span> <span class="nv">C3</span>  <span class="o">........</span><span class="nv">-</span><span class="o">........</span>
</span><span class='line'><span class="mi">00000060</span><span class="nv">:</span>  <span class="nv">B3</span> <span class="nv">C3</span> <span class="nv">B2</span> <span class="nv">C3</span> <span class="nv">B4</span> <span class="nv">C3</span> <span class="nv">B6</span> <span class="nv">C3-B5</span> <span class="nv">C3</span> <span class="nv">BA</span> <span class="nv">C3</span> <span class="nv">B9</span> <span class="nv">C3</span> <span class="nv">BB</span> <span class="nv">C3</span>  <span class="o">........</span><span class="nv">-</span><span class="o">........</span>
</span><span class='line'><span class="mi">00000070</span><span class="nv">:</span>  <span class="nv">BC</span> <span class="nv">E2</span> <span class="mi">80</span> <span class="nv">A0</span> <span class="nv">C2</span> <span class="nv">B0</span> <span class="nv">C2</span> <span class="nv">A2-C2</span> <span class="nv">A3</span> <span class="nv">C2</span> <span class="nv">A7</span> <span class="nv">E2</span> <span class="mi">80</span> <span class="nv">A2</span> <span class="nv">C2</span>  <span class="o">........</span><span class="nv">-</span><span class="o">........</span>
</span><span class='line'><span class="mi">00000080</span><span class="nv">:</span>  <span class="nv">B6</span> <span class="nv">C3</span> <span class="mi">9</span><span class="nv">F</span> <span class="nv">C2</span> <span class="nv">AE</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00-00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="o">........</span><span class="nv">-</span><span class="o">........</span>
</span><span class='line'>
</span><span class='line'><span class="nv">:THROW_AWAY</span>
</span><span class='line'><span class="mi">00000000</span><span class="nv">:</span>  <span class="mi">46</span> <span class="mi">47</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00-00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="nv">FG</span><span class="o">......</span><span class="nv">-</span><span class="o">........</span>
</span><span class='line'>
</span><span class='line'><span class="nv">:THE_END</span>
</span><span class='line'><span class="nv">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it.  The whole enchilada.</p>

<ul>
<li>It is pretty?  No.</li>
<li>Is it robust?  No.</li>
<li>Can the code be improved?  Yes.</li>
<li>Is it a solid starting point?  Yes.</li>
</ul>


<p>Hopefully you find it a useful tool if you decide to try it out because with just a tiny bit of code, you can view your binary files with the semantic information you really care about.</p>

<p>Thanks to Dave Sletten for the hex dump utility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Clojure]]></title>
    <link href="http://brweber2-blog.heroku.com/blog/2011/11/25/hello-clojure/"/>
    <updated>2011-11-25T23:25:00-05:00</updated>
    <id>http://brweber2-blog.heroku.com/blog/2011/11/25/hello-clojure</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span> (hello.clj)</span> <a href='http://brweber2-blog.heroku.com/downloads/code/hello.clj'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">ns</span> <span class="nv">my</span><span class="o">.</span><span class="nv">ns</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">greet</span> <span class="p">[</span><span class="nv">name</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hello&quot;</span> <span class="nv">name</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">greet</span> <span class="s">&quot;User&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
